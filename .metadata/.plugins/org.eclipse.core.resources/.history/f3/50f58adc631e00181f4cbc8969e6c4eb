package Dota2Parser.Dota2Parser;

import java.io.File;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;

import skadistats.clarity.Clarity;
import skadistats.clarity.model.CombatLogEntry;
import skadistats.clarity.model.Entity;
import skadistats.clarity.model.FieldPath;
import skadistats.clarity.model.StringTable;
import skadistats.clarity.processor.entities.Entities;
import skadistats.clarity.processor.entities.OnEntityCreated;
import skadistats.clarity.processor.entities.OnEntityUpdated;
import skadistats.clarity.processor.entities.UsesEntities;
import skadistats.clarity.processor.gameevents.OnCombatLogEntry;
import skadistats.clarity.processor.reader.OnTickStart;
import skadistats.clarity.processor.runner.Context;
import skadistats.clarity.processor.runner.SimpleRunner;
import skadistats.clarity.processor.stringtables.StringTables;
import skadistats.clarity.processor.stringtables.UsesStringTable;
import skadistats.clarity.source.MappedFileSource;
import skadistats.clarity.source.Source;
import skadistats.clarity.wire.common.proto.Demo.CDemoFileInfo;
import skadistats.clarity.wire.common.proto.DotaUserMessages;

@UsesEntities
public class App
{    
    private PrintWriter heroWriter;
    private PrintWriter heroSelectionWriter;
    private PrintWriter cameraWriter;
    private PrintWriter stateWriter;
    private PrintWriter heroIdWriter;
    private PrintWriter timeWriter;
    private PrintWriter combatWriter;
    private PrintWriter neutralMonsterWriter;
    private PrintWriter laneCreepWriter;
    
    private Hero hero;
    private Camera camera;
    private Selection selection;
    private GameState state;
    private GameTime time;
    private Team team;
    private Spectator spectator;
    private CombatLog combatLog;
    private NeutralMonster neutralMonster;
    private LaneCreep laneCreep;
    
    private HashMap<Object, String> heroIds;
    
    private void writeToFile(PrintWriter writer, Context ctx, Entity e, String type, FieldPath ...fieldPaths)
    {
        // Build a string in the format "%d [TYPE] %s %s ...\n"
        StringBuilder sb = new StringBuilder();
        sb.append(ctx.getTick() + " [");
        sb.append(type);
        sb.append("]");
        for (int i = 0; i < fieldPaths.length; i++)
        {
            sb.append(" " + e.getPropertyForFieldPath(fieldPaths[i]));
        }
        sb.append("\n");
        
        writer.write(sb.toString());
        writer.flush();
    }
    
    private boolean isHero(Entity e)
    {
        return e.getDtClass().getDtName().startsWith("CDOTA_Unit_Hero");
    }
    
    private boolean isGameRules(Entity e)
    {
        return e.getDtClass().getDtName().equals("CDOTAGamerulesProxy");
    }
    
    private boolean isPlayer(Entity e)
    {
        return e.getDtClass().getDtName().equals("CDOTAPlayer");
    }
    
    private boolean isTeam(Entity e)
    {
        return e.getDtClass().getDtName().equals("CDOTA_DataRadiant") ||
        	e.getDtClass().getDtName().equals("CDOTA_DataDire");
    }
    
    private boolean isSpectator(Entity e)
    {
        return e.getDtClass().getDtName().equals("CDOTA_DataSpectator");
    }
    
    private boolean isNeutralMonster(Entity e)
    {
    	return e.getDtClass().getDtName().equals("CDOTA_BaseNPC_Creep_Neutral");
    }
    
    private boolean isLaneCreep(Entity e)
    {
    	return e.getDtClass().getDtName().equals("CDOTA_BaseNPC_Creep_Lane");
    }
    
    private void initializeSelection(Entity e)
    {
        if (selection == null)
            selection = new Selection(e);
    }
    
    private void initializeHero(Entity e)
    {
        if (hero == null)
            hero = new Hero(e); 
    }
    
    private void initializeCamera(Entity e)
    {
        if (camera == null)
            camera = new Camera(e);
    }
    
    private void initializeState(Entity e)
    {
        if (state == null)
            state = new GameState(e);
    }
    
    private void initializeTime(Entity e)
    {
        if (time == null)
            time = new GameTime(e);
    }
    
    private void initializeTeam(Entity e)
    {
        if (team == null)
            team = new Team(e);
    }
    
    private void initializeSpectator(Entity e)
    {
        if (spectator == null)
        	spectator = new Spectator(e);
    }
    
    private void initializeNeutralMonster(Entity e)
    {
        if (neutralMonster == null)
        	neutralMonster = new NeutralMonster(e);
    }
    
    private void initializeLaneCreep(Entity e)
    {
        if (laneCreep == null)
        	laneCreep = new LaneCreep(e);
    }
    
    @OnCombatLogEntry
    public void onCombatLogEntry(CombatLogEntry cle) 
    {
    	combatLog.onCombatLogEntry(cle);
    }
    
    @OnEntityCreated
    @UsesStringTable("EntityNames")
    public void onCreated(Context ctx, Entity e)
    {
        if (isHero(e))
        {
            initializeHero(e);
            handleHero(ctx, e, null, 0, true);
        }
        else if (isTeam(e))
        {
        	initializeTeam(e);
        	handleTeam(ctx, e, null, 0, true);
        }
        else if (isSpectator(e))
        {
        	initializeSpectator(e);
        	handleSpectator(ctx, e, null, 0, true);
        }
        else if (isNeutralMonster(e))
        {
        	initializeNeutralMonster(e);
        	handleNeutralMonster(ctx, e, null, 0, true);
        }
        else if (isLaneCreep(e))
        {
        	initializeLaneCreep(e);
        	handleLaneCreep(ctx, e, null, 0, true);
        }
    }

    @OnEntityUpdated
    @UsesStringTable("EntityNames")
    public void onUpdated(Context ctx, Entity e, FieldPath[] updatedPaths, int updateCount)
    {
        if (isHero(e))
        {
            handleHero(ctx, e, updatedPaths, updateCount, false);
        }
        else if (isGameRules(e))
        {
            handleHeroSelection(ctx, e, updatedPaths, updateCount);
            handleGameState(ctx, e, updatedPaths, updateCount);
            handleGameTime(ctx, e, updatedPaths, updateCount);
        }
        else if (isPlayer(e))
        {
            handleCamera(ctx, e, updatedPaths, updateCount);
        }
        else if (isTeam(e))
        {
        	handleTeam(ctx, e, updatedPaths, updateCount, false);
        }
        else if (isSpectator(e))
        {
        	handleSpectator(ctx, e, updatedPaths, updateCount, false);
        }
        else if (isNeutralMonster(e))
        {
        	handleNeutralMonster(ctx, e, updatedPaths, updateCount, false);
        }
        else if (isLaneCreep(e))
        {
        	handleLaneCreep(ctx, e, updatedPaths, updateCount, false);
        }
    }
    
    private void handleCamera(Context ctx, Entity e, FieldPath[] updatedPaths, int updateCount)
    {
        initializeCamera(e);
        
        boolean updatePosition = false;
        for (int i = 0; i < updateCount; i++)
        {
            if (camera.isPosition(updatedPaths[i]))
            {
                updatePosition = true;
                break;
            }
        }
        
        if (updatePosition)
        	writeToFile(cameraWriter, ctx, e, "POSITION", camera.playerID, camera.x, camera.y, camera.z);
    }
    
    private void handleGameState(Context ctx, Entity e, FieldPath[] updatedPaths, int updateCount)
    {
        initializeState(e);
        
        boolean updateState = false;
        for (int i = 0; i < updateCount; i++)
        {
            if (state.isState(updatedPaths[i]))
            {
                updateState = true;
                break;
            }
        }
        
        if (updateState)
        	writeToFile(stateWriter, ctx, e, "STATE", state.state);
    }
    
    private void handleGameTime(Context ctx, Entity e, FieldPath[] updatedPaths, int updateCount)
    {
    	initializeTime(e);
        
        boolean updateTime = false;
        for (int i = 0; i < updateCount; i++)
        {
            if (time.isTime(updatedPaths[i]))
            {
                updateTime = true;
                break;
            }
        }
        
        if (updateTime)
        {
        	writeToFile(timeWriter, ctx, e, "TIME", time.time);
        }
    }
    
    private void handleHeroSelection(Context ctx, Entity e, FieldPath[] updatedPaths, int updateCount)
    {
        initializeSelection(e);
        
        boolean updateSelection[] = new boolean[10];
        boolean updateBan[] = new boolean[12];
        for (int i = 0; i < updateCount; i++)
        {
            for (int j = 0; j < 10; j++)
                if (updatedPaths[i].equals(selection.selections[j]))
                    updateSelection[j] = true;
            
            for (int j = 0; j < 12; j++)
                if (updatedPaths[i].equals(selection.bans[j]))
                    updateBan[j] = true;
        }        
        
        for (int i = 0; i < 10; i++)
            if (updateSelection[i])
            	writeToFile(heroSelectionWriter, ctx, e, "SELECT", selection.selections[i]);
        
        for (int i = 0; i < 12; i++)
            if (updateBan[i])
            	writeToFile(heroSelectionWriter, ctx, e, "BAN", selection.bans[i]);
    }
    
    private void handleHero(Context ctx, Entity e, FieldPath[] updatedPaths, int updateCount, boolean forceUpdate)
    {
        if (heroIds.size() != 10)
            heroIds.put(e.getPropertyForFieldPath(hero.playerID), e.getDtClass().getDtName());
        
        boolean updatePosition = false;
        boolean updateHealth = false;
        boolean updateLevel = false;
        boolean updateMana = false;
        boolean updateStrength = false;
        boolean updateIntellect = false;
        boolean updateAgility = false;
        boolean updateMaxHealth = false;
        boolean updateManaRegen = false;
        boolean updateHealthRegen = false;
        boolean updateMovementSpeed = false;
        boolean updateDamageMin = false;
        boolean updateDamageMax = false;
        boolean updateItems = false;
        boolean updatePhysicalArmor = false;
        boolean updateMagicalResistance = false;
        for (int i = 0; i < updateCount; i++)
        {
            if (hero.isPosition(updatedPaths[i]))
                updatePosition = true;
            if (hero.isHealth(updatedPaths[i]))
                updateHealth = true;            
            if (hero.isLevel(updatedPaths[i]))
                updateLevel = true;
            if (hero.isMana(updatedPaths[i]))
                updateMana = true;
            if (hero.isStrength(updatedPaths[i]))
                updateStrength = true;
            if (hero.isIntellect(updatedPaths[i]))
                updateIntellect = true;
            if (hero.isAgility(updatedPaths[i]))
                updateAgility = true;
            if (hero.isMaxHealth(updatedPaths[i]))
                updateMaxHealth = true;
            if (hero.isManaRegen(updatedPaths[i]))
                updateManaRegen = true;
            if (hero.isHealthRegen(updatedPaths[i]))
                updateHealthRegen = true;
            if (hero.isMovementSpeed(updatedPaths[i]))
                updateMovementSpeed = true;
            if (hero.isDamageMin(updatedPaths[i]))
                updateDamageMin = true;
            if (hero.isDamageMax(updatedPaths[i]))
                updateDamageMax = true;
            if (hero.isItems(updatedPaths[i]))
                updateItems = true;
            if (hero.isPhysicalArmor(updatedPaths[i]))
                updatePhysicalArmor = true;
            if (hero.isMagicalResistance(updatedPaths[i]))
                updateMagicalResistance = true;
        }
        
        if (updatePosition || forceUpdate)
            writeToFile(heroWriter, ctx, e, "POSITION", hero.playerID, hero.x, hero.y, hero.z);
        if (updateHealth || forceUpdate)
            writeToFile(heroWriter, ctx, e, "HEALTH", hero.playerID, hero.health);
        if (updateLevel || forceUpdate)
            writeToFile(heroWriter, ctx, e, "LEVEL", hero.playerID, hero.level);
        if (updateMana || forceUpdate)
            writeToFile(heroWriter, ctx, e, "MANA", hero.playerID, hero.mana);
        if (updateStrength || forceUpdate)
            writeToFile(heroWriter, ctx, e, "STRENGTH", hero.playerID, hero.strength);
        if (updateIntellect || forceUpdate)
            writeToFile(heroWriter, ctx, e, "INTELLECT", hero.playerID, hero.intellect);
        if (updateAgility || forceUpdate)
            writeToFile(heroWriter, ctx, e, "AGILITY", hero.playerID, hero.agility);
        if (updateMaxHealth || forceUpdate)
            writeToFile(heroWriter, ctx, e, "MAXHEALTH", hero.playerID, hero.maxHealth);
        if (updateManaRegen || forceUpdate)
            writeToFile(heroWriter, ctx, e, "MANAREGEN", hero.playerID, hero.manaRegen);
        if (updateHealthRegen || forceUpdate)
            writeToFile(heroWriter, ctx, e, "HEALTHREGEN", hero.playerID, hero.healthRegen);
        if (updateMovementSpeed || forceUpdate)
            writeToFile(heroWriter, ctx, e, "MOVEMENTSPEED", hero.playerID, hero.movementSpeed);
        if (updateDamageMin || forceUpdate)
            writeToFile(heroWriter, ctx, e, "DAMAGEMIN", hero.playerID, hero.damageMin);
        if (updateDamageMax || forceUpdate)
            writeToFile(heroWriter, ctx, e, "DAMAGEMAX", hero.playerID, hero.damageMax);
        if (updatePhysicalArmor || forceUpdate)
            writeToFile(heroWriter, ctx, e, "ARMOR", hero.playerID, hero.physicalArmor);
        if (updateMagicalResistance || forceUpdate)
            writeToFile(heroWriter, ctx, e, "RESISTANCE", hero.playerID, hero.magicalResistance);
        if (updateItems || forceUpdate)
        {
        	StringTable itemNames = ctx.getProcessor(StringTables.class).forName("EntityNames");
        	heroWriter.format("%d [ITEMS] %s ", ctx.getTick(), e.getPropertyForFieldPath(hero.playerID));
        	for (int i = 0; i < hero.itemCount; i++)
        	{
        		Entity itemEntity = ctx.getProcessor(Entities.class).getByHandle((Integer)e.getPropertyForFieldPath(hero.items[i]));
        		if (itemEntity == null)
        		{
        			heroWriter.write("null ");
        		}
        		else
        		{
        			Integer itemHandle = (Integer)itemEntity.getProperty("m_pEntity.m_nameStringableIndex");
        			heroWriter.format("%s ", itemNames.getNameByIndex(itemHandle));
        		}
        	}
        	heroWriter.write("\n");
        	heroWriter.flush();
        }
    }
    
    private void handleTeam(Context ctx, Entity e, FieldPath[] updatedPaths, int updateCount, boolean forceUpdate)
    {
    	boolean updateGold[] = new boolean[5];
    	boolean updatingGold = false;
        for (int i = 0; i < updateCount; i++)
        {
            for (int j = 0; j < 5; j++)
                if (team.isGold(updatedPaths[i], j))
                {
                	updatingGold = true;
                	updateGold[j] = true;
                }
        }        
        
        if (updatingGold)
        {
        	// Need to get the player id out of 10 players, so add 5 to id if on dire team
        	int add = 0;
        	if (e.getDtClass().getDtName().equals("CDOTA_DataDire"))
        	{
        		add = 5;
        	}
        	
        	for (int i = 0; i < 5; i++)
        		if (updateGold[i])
        			heroWriter.format("%d [EARNEDGOLD] %d %s %s \n",
        				ctx.getTick(), (i + add), e.getPropertyForFieldPath(team.reliableGold[i]), e.getPropertyForFieldPath(team.unreliableGold[i]));

	        heroWriter.flush();
        }
    }
    
    private void handleSpectator(Context ctx, Entity e, FieldPath[] updatedPaths, int updateCount, boolean forceUpdate)
    {
    	boolean updateNetWorth[] = new boolean[10];
    	boolean updatingNetWorth = false;
        for (int i = 0; i < updateCount; i++)
        {
            for (int j = 0; j < 10; j++)
                if (spectator.isNetWorth(updatedPaths[i], j))
                {
                	updatingNetWorth = true;
                	updateNetWorth[j] = true;
                }
        }        
        
        if (updatingNetWorth)
        {        	
        	for (int i = 0; i < 10; i++)
        		if (updateNetWorth[i])
        			heroWriter.format("%d [NETWORTH] %d %s \n",
        				ctx.getTick(), i, e.getPropertyForFieldPath(spectator.netWorth[i]));

	        heroWriter.flush();
        }
    }
    
    private void handleNeutralMonster(Context ctx, Entity e, FieldPath[] updatedPaths, int updateCount, boolean forceUpdate)
    {
    	initializeNeutralMonster(e);
    	
        boolean updatePosition = false;
        boolean updateHealth = false;
        boolean updatePhysicalArmor = false;
        boolean updateMagicalResistance = false;
        for (int i = 0; i < updateCount; i++)
        {
            if (hero.isPosition(updatedPaths[i]))
                updatePosition = true;
            if (hero.isHealth(updatedPaths[i]))
                updateHealth = true;
            if (hero.isPhysicalArmor(updatedPaths[i]))
                updatePhysicalArmor = true;
            if (hero.isMagicalResistance(updatedPaths[i]))
                updateMagicalResistance = true;
        }

        if (updatePosition || forceUpdate)
        {   		
        	neutralMonsterWriter.format("%d [POSITION] %s %s %s\n",
    				ctx.getTick(),
    				e.getPropertyForFieldPath(neutralMonster.x),
    				e.getPropertyForFieldPath(neutralMonster.y),
    				e.getPropertyForFieldPath(neutralMonster.z));
        }
        if (updateHealth || forceUpdate)
        {
            neutralMonsterWriter.format("%d [HEALTH] %s\n",
    				ctx.getTick(),
    				e.getPropertyForFieldPath(neutralMonster.health));
        }
    }
    
    private void handleLaneCreep(Context ctx, Entity e, FieldPath[] updatedPaths, int updateCount, boolean forceUpdate)
    {
    	initializeLaneCreep(e);
    	
        boolean updatePosition = false;
        boolean updateHealth = false;
        for (int i = 0; i < updateCount; i++)
        {
            if (hero.isPosition(updatedPaths[i]))
                updatePosition = true;
            if (hero.isHealth(updatedPaths[i]))
                updateHealth = true; 
        }
        
        if (updatePosition || forceUpdate)
            writeToFile(laneCreepWriter, ctx, e, "POSITION", laneCreep.teamNumber, laneCreep.x, laneCreep.y, laneCreep.z);
        if (updateHealth || forceUpdate)
            writeToFile(laneCreepWriter, ctx, e, "HEALTH", laneCreep.teamNumber, laneCreep.health);
    }
    
    public void run(String[] args) throws Exception
    {
        CDemoFileInfo info = Clarity.infoForFile(args[0]);
        File infoFile = new File(args[1] + "/info.txt");
        PrintWriter w = new PrintWriter(infoFile);
        w.write(info.toString());
        w.close();
        
        File heroFile = new File(args[1] + "/hero.txt");
        File selectionFile = new File(args[1] + "/selection.txt");
        File cameraFile = new File(args[1] + "/camera.txt");
        File stateFile = new File(args[1] + "/state.txt");
        File heroIdFile = new File(args[1] + "/heroId.txt");
        File timeFile = new File(args[1] + "/time.txt");
        File combatFile = new File(args[1] + "/combat.txt");
        File neutralMonsterFile = new File(args[1] + "/neutral_creep.txt");
        File laneCreepFile = new File(args[1] + "/lane_creep.txt");
        
        heroWriter = new PrintWriter(heroFile);
        heroSelectionWriter = new PrintWriter(selectionFile);
        cameraWriter = new PrintWriter(cameraFile);
        stateWriter = new PrintWriter(stateFile);
        heroIdWriter = new PrintWriter(heroIdFile);
        timeWriter = new PrintWriter(timeFile);
        combatWriter = new PrintWriter(combatFile);
        neutralMonsterWriter = new PrintWriter(neutralMonsterFile);
        laneCreepWriter = new PrintWriter(laneCreepFile);
        
        combatLog = new CombatLog(combatWriter);
        
        heroIds = new HashMap<Object, String>();
        
        Source source = new MappedFileSource(args[0]);
        new SimpleRunner(source).runWith(this);
        
        for (Map.Entry<Object, String> heroId : heroIds.entrySet())
        {
            heroIdWriter.write(heroId.getKey() + " " + heroId.getValue() + "\n");
            heroIdWriter.flush();
        }
        
        heroWriter.close();
        heroSelectionWriter.close();
        cameraWriter.close();
        stateWriter.close();
        heroIdWriter.close();
        timeWriter.close();
        combatWriter.close();
        neutralMonsterWriter.close();
        laneCreepWriter.close();
    }

    public static void main(String[] args) throws Exception
    {
        // args[0] is location of .dem file
        // args[1] is location to store files
        
        // 30 ticks per second
        new App().run(args);
    }

}